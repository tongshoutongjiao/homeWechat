<template>
  <!-- 手机号输入框 -->
  <view class="reset-box reset-phone {{phoneActive}}">
    <!-- 输入框 -->
    <input class="reset-input" type="number" value="{{phone}}" focus="{{phoneFocus}}" data-type="phone" bindfocus="inputFocus" bindinput="inputInput"  bindblur="inputBlur" />
    <!-- placeholder -->
    <view class="placeholder-model" style="display:{{phoneModel}}">
      <text>请输入手机号</text>
    </view>
    <!-- 清除icon -->
    <icon class="reset-close" type="clear" size="16" data-type="phone" bindtap="inputClear" style="display:{{phoneIcon}}" />
  </view>
  <view class="reset-wrapper">
    <!-- 验证码输入框 -->
    <view class="reset-box reset-vcode {{vCodeActive}}">
      <!-- 输入框 -->
      <input class="reset-input" type="text" value="{{vCode}}" focus="{{vCodeFocus}}" data-type="vCode" bindfocus="inputFocus" bindinput="inputInput" bindblur="inputBlur" />
      <!-- placeholder -->
      <view class="placeholder-model" style="display:{{vCodeModel}}">
        <text>请输入验证码</text>
      </view>
      <!-- 清除icon -->
      <icon class="reset-close" type="clear" size="16" data-type="vCode" bindtap="inputClear" style="display:{{vCodeIcon}}" />
    </view>
    <!-- 获取验证码 -->
    <view class="btn-default vcode-default {{vCodeStatus}}" bindtap="getVcode">{{vCodeText}}</view>
  </view>
  <!-- 密码输入框 -->
  <view class="reset-box reset-password {{passwordActive}}">
    <!-- 输入框 -->
    <input class="reset-input" type="number" password="true" value="{{password}}" focus="{{passwordFocus}}" data-type="password" bindfocus="inputFocus" bindinput="inputInput"  bindblur="inputBlur" />
    <!-- placeholder -->
    <view class="placeholder-model" style="display:{{passwordModel}}">
      <text>请输入密码</text>
      <text class="font12">(6-20位英文字母、数字)</text>
    </view>
    <!-- 清除icon -->
    <icon class="reset-close" type="clear" size="16" data-type="password" bindtap="inputClear" style="display:{{passwordIcon}}" />
  </view>
  <!-- 再次输入密码框 -->
  <view class="reset-box reset-password {{rePasswordActive}}">
    <!-- 输入框 -->
    <input class="reset-input" type="number" password="true" value="{{rePassword}}" focus="{{rePasswordFocus}}" data-type="rePassword" bindfocus="inputFocus" bindinput="inputInput"  bindblur="inputBlur" />
    <!-- placeholder -->
    <view class="placeholder-model" style="display:{{rePasswordModel}}">
      <text>请再次输入密码</text>
    </view>
    <!-- 清除icon -->
    <icon class="reset-close" type="clear" size="16" data-type="rePassword" bindtap="inputClear" style="display:{{rePasswordIcon}}" />
  </view>
  <!-- 确定btn -->
  <view class="btn-default {{btnStatus}}" bindtap="reset">确定</view>
  <!-- 提示信息 -->
  <toast />
</template>

<script>
  import wepy from 'wepy'
  import api from '../api.js'
  import Toast from 'wepy-com-toast'
  import util from '../utils/util'
  export default class Index extends wepy.page {
    config = {
      navigationBarTitleText: '重置密码'
    }
    data = {
      phoneActive: '', // 手机号边框
      phone: '', // 手机号
      phoneFocus: false, // 手机号输入框获取焦点
      phoneModel: 'block', // 手机号placeholder
      phoneIcon: 'none', // 手机号清除图标
      vCodeActive: '', // 验证码边框
      vCode: '', // 验证码
      vCodeFocus: false, // 验证码输入框获取焦点
      vCodeModel: 'block', // 验证码placeholder
      vCodeIcon: 'none', // 验证码清除图标
      passwordActive: '', // 密码边框
      password: '', // 密码
      passwordFocus: false, // 密码输入框获取焦点
      passwordModel: 'block', // 密码placeholder
      passwordIcon: 'none', // 密码清除图标
      rePasswordActive: '', // 密码边框
      rePassword: '', // 密码
      rePasswordFocus: false, // 密码输入框获取焦点
      rePasswordModel: 'block', // 密码placeholder
      rePasswordIcon: 'none', // 密码清除图标
      vCodeStatus: 'active', // 获取验证码按钮样式
      vCodeText: '获取验证码', // 获取验证码按钮样式
      wait: 60,
      btnStatus: '' // 登录按钮样式
    }
    components = {
      toast: Toast
    }
    // 输入框获取焦点事件
    async inputFocus(e) {
      // 判断输入框类型
      if (e.currentTarget.dataset.type === 'phone') {
        this.phoneActive = 'active' // 修改手机号边框
        // 手机号不为空，显示清除图标
        if (e.detail.value) {
          this.phoneIcon = 'block'
        }
      } else if (e.currentTarget.dataset.type === 'vCode') {
        this.vCodeActive = 'active' // 修改验证码边框
        // 验证码不为空，显示清除图标
        if (e.detail.value) {
          this.vCodeIcon = 'block'
        }
      } else if (e.currentTarget.dataset.type === 'password') {
        this.passwordActive = 'active' // 修改密码边框
        // 密码不为空，显示清除图标
        if (e.detail.value) {
          this.passwordIcon = 'block'
        }
      } else {
        this.rePasswordActive = 'active' // 修改再次输入密码边框
        // 再次输入密码不为空，显示清除图标
        if (e.detail.value) {
          this.rePasswordIcon = 'block'
        }
      }
    }
    // 输入框输入事件
    async inputInput(e) {
      // 判断输入框类型
      if (e.currentTarget.dataset.type === 'phone') {
        this.phone = e.detail.value // 给手机号赋值
        // 判断手机号是否为空，如果不为空，隐藏placeholder，显示清除图标，否则显示placehoder，隐藏清除图标
        if (!e.detail.value) {
          this.phoneModel = 'block'
          this.phoneIcon = 'none'
        } else {
          this.phoneModel = 'none'
          this.phoneIcon = 'block'
        }
        // 判断输入内容满足登录条件时，登录按钮变蓝
        if (this.phone.length === 11 && this.vCode.length === 6 && this.password.length >= 6 && this.rePassword.length >= 6) {
          this.btnStatus = 'active'
        } else {
          this.btnStatus = ''
        }
      } else if (e.currentTarget.dataset.type === 'vCode') {
        this.vCode = e.detail.value // 给验证码赋值
        // 判断验证码是否为空，如果不为空，隐藏placeholder，显示清除图标，否则显示placehoder，隐藏清除图标
        if (!e.detail.value) {
          this.vCodeModel = 'block'
          this.vCodeIcon = 'none'
        } else {
          this.vCodeModel = 'none'
          this.vCodeIcon = 'block'
        }
        // 判断输入内容满足登录条件时，登录按钮变蓝
        if (this.phone.length === 11 && this.vCode.length === 6 && this.password.length >= 6 && this.rePassword.length >= 6) {
          this.btnStatus = 'active'
        } else {
          this.btnStatus = ''
        }
      } else if (e.currentTarget.dataset.type === 'password') {
        this.password = e.detail.value // 给验证码赋值
        // 判断密码是否为空，如果不为空，隐藏placeholder，显示清除图标，否则显示placehoder，隐藏清除图标
        if (!e.detail.value) {
          this.passwordModel = 'block'
          this.passwordIcon = 'none'
        } else {
          this.passwordModel = 'none'
          this.passwordIcon = 'block'
        }
        // 判断输入内容满足登录条件时，登录按钮变蓝
        if (this.phone.length === 11 && this.vCode.length === 6 && this.password.length >= 6 && this.rePassword.length >= 6) {
          this.btnStatus = 'active'
        } else {
          this.btnStatus = ''
        }
      } else if (e.currentTarget.dataset.type === 'rePassword') {
        this.rePassword = e.detail.value // 给验证码赋值
        // 判断再次输入密码是否为空，如果不为空，隐藏placeholder，显示清除图标，否则显示placehoder，隐藏清除图标
        if (!e.detail.value) {
          this.rePasswordModel = 'block'
          this.rePasswordIcon = 'none'
        } else {
          this.rePasswordModel = 'none'
          this.rePasswordIcon = 'block'
        }
        // 判断输入内容满足登录条件时，登录按钮变蓝
        if (this.phone.length === 11 && this.vCode.length === 6 && this.password.length >= 6 && this.rePassword.length >= 6) {
          this.btnStatus = 'active'
        } else {
          this.btnStatus = ''
        }
      }
    }
    // 输入框失去焦点事件
    async inputBlur(e) {
      // 判断输入框类型
      if (e.currentTarget.dataset.type === 'phone') {
        this.phoneIcon = 'none' // 隐藏手机号清除图标
        this.phoneFocus = false // 手机号输入框失去焦点
        if (!e.detail.value) {
          this.phoneActive = '' // 修改手机号边框
        }
      } else if (e.currentTarget.dataset.type === 'vCode') {
        this.vCodeIcon = 'none' // 隐藏验证码清除图标
        this.vCodeFocus = false // 验证码输入框失去焦点
        if (!e.detail.value) {
          this.vCodeActive = '' // 修改验证码边框
        }
      } else if (e.currentTarget.dataset.type === 'password') {
        this.passwordIcon = 'none' // 隐藏密码清除图标
        this.passwordFocus = false // 密码输入框失去焦点
        if (!e.detail.value) {
          this.passwordActive = '' // 修改密码边框
        }
      } else if (e.currentTarget.dataset.type === 'rePassword') {
        this.rePasswordIcon = 'none' // 隐藏再次输入密码清除图标
        this.rePasswordFocus = false // 再次输入密码输入框失去焦点
        if (!e.detail.value) {
          this.rePasswordActive = '' // 修改再次输入密码边框
        }
      }
    }
    // 清除图标点击事件
    async inputClear(e) {
      // 判断是手机号输入框还是密码输入框
      if (e.currentTarget.dataset.type === 'phone') {
        this.phone = '' // 清空手机号输入框
        this.phoneIcon = 'none' // 清除按钮隐藏
        this.phoneModel = 'block' // 显示placeholder
        this.btnStatus = 'btn-default' // 登录按钮置灰
        this.phoneFocus = true // 手机号输入框获取焦点
      } else if (e.currentTarget.dataset.type === 'vCode') {
        this.vCode = '' // 清空验证码输入框
        this.vCodeIcon = 'none' // 清除按钮隐藏
        this.vCodeModel = 'block' // 显示placeholder
        this.btnStatus = 'btn-default' // 登录按钮置灰
        this.vCodeFocus = true // 验证码输入框获取焦点
      } else if (e.currentTarget.dataset.type === 'password') {
        this.password = '' // 清空密码输入框
        this.passwordIcon = 'none' // 清除按钮隐藏
        this.passwordModel = 'block' // 显示placeholder
        this.btnStatus = 'btn-default' // 登录按钮置灰
        this.passwordFocus = true // 密码输入框获取焦点
      } else if (e.currentTarget.dataset.type === 'rePassword') {
        this.rePassword = '' // 清空再次输入密码输入框
        this.rePasswordIcon = 'none' // 清除按钮隐藏
        this.rePasswordModel = 'block' // 显示placeholder
        this.btnStatus = 'btn-default' // 登录按钮置灰
        this.rePasswordFocus = true // 再次输入密码输入框获取焦点
      }
    }
    // 获取验证码
    async getVcode() {
      if (this.vCodeStatus === '') {
        return false
      } else {
        if (!util.vailPhone(this.phone)) {
          this.$invoke('toast', 'show', {
            title: '请输入正确的手机号'
          })
          return false
        }
        let _this = this
        _this.vCodeStatus = ''
        _this.vCodeText = _this.wait + 's'
        _this.wait--
        let time = setInterval(function() {
          if (_this.wait === 0) {
            _this.vCodeStatus = 'active'
            _this.vCodeText = '再次获取验证码'
            _this.wait = 60
            clearInterval(time) // 停止计时器
          } else {
            _this.vCodeStatus = ''
            _this.vCodeText = _this.wait + 's'
            _this.wait--
          }
          _this.$apply()
        }, 1000)
        // 访问发送验证码接口
        await api.sms({
          method: 'POST',
          data: {
            telNum: this.phone
          }
        })
      }
    }
    // 重置密码
    async reset(e) {
      if (this.btnStatus === 'active') {
        if (this.password !== this.rePassword) {
          this.$invoke('toast', 'show', {
            title: '两次输入的密码不一致'
          })
          return false
        }
        let result = await api.findPwd({
          method: 'POST',
          data: {
            telNum: this.phone,
            pwd: this.password,
            sms: this.vCode
          }
        })
        this.$invoke('toast', 'show', {
          title: result.data.error || result.data.msg || result.data.message || '网络请求失败'
        })
        if (result.data.result === 200) {
          await wepy.redirectTo({url: 'forgetPassword'})
        }
      }
    }
  }
</script>

<style>
  /*输入框外围*/
  .reset-box {
    position: relative;
    width: 560rpx;
    height: 84rpx;
    margin: 0 auto;
    border: 1rpx solid #E7E7E7;
    border-radius: 40rpx;
    overflow: hidden;
  }
  /*输入框选中状态*/
  .reset-box.active {
    border: 1rpx solid #358DFF;
  }
  /*手机号输入框*/
  .reset-phone {
    margin-top: 100rpx;
  }
  /*验证码外围*/
  .reset-wrapper {
    margin-top: 50rpx;
    overflow: hidden;
  }
  /*验证码输入框*/
  .reset-vcode {
    float: left;
    width: 300rpx;
    margin-right: 0;
    margin-left: 95rpx;
  }
  /*密码输入框*/
  .reset-password {
    margin-top: 50rpx;
  }
  /*输入框*/
  .reset-input {
    float: left;
    width: 364rpx;
    height: 36rpx;
    min-height: 0;
    margin-top: 24rpx;
    margin-left: 40rpx;
    line-height: 36rpx;
    color: #358DFF;
    font-size: 14px;
  }
  .reset-vcode .reset-input {
    width: 177rpx;
  }
  /*palcehoder*/
  .placeholder-model {
    position: absolute;
    top: 24rpx;
    left: 40rpx;
    line-height: 36rpx;
    color: #D0D0D4;
    font-size: 14px;
  }
  /*字号12*/
  .font12 {
    font-size: 12px;
  }
  /*清除icon*/
  .reset-close {
    position: absolute;
    right: 40rpx;
    top: 26rpx;
    width: 32rpx;
    height: 32rpx;
    z-index: 10;
  }
  /*默认按钮*/
  .btn-default{
    display: flex;
    position: relative;
    width: 560rpx;
    height: 88rpx;
    margin: 0 auto;
    margin-top: 70rpx;
    border-radius: 40rpx;
    background: #C2DDFF;
    color: #FFF;
    font-size: 15px;
    box-sizing: border-box;
    justify-content: center;
    align-items: center;
  }
  /*获取验证码按钮*/
  .vcode-default {
    float: right;
    width: 230rpx;
    margin-top: 0;
    margin-right: 95rpx;
  }
  /*按钮可点击状态*/
  .btn-default.active{
    background: #358DFF;
  }
  /*提示信息*/
  .wetoast__bd {
    min-width: 200px;
    min-height: 0;
    padding: 10px;
  }
  /*提示信息标题*/
  .wetoast__bd__title {
    font-size: 14px;
  }
</style>
