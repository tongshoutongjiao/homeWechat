<template>
  <view class="filter-slider-bg" bindtap="handleFilterCancel" data-bool-view-filter="{{boolViewFilter}}" wx:if="{{boolViewFilter}}" ></view>
  <view class="filter-slider {{boolViewFilter ? 'no-translate' : ''}} flex">
    <scroll-view scroll-y class="scroll-view" >
      <view class="" wx:if="{{filterList.length > 0}}">
        <view class="filter-title">筛选方式</view>
        <view class="filter-category filter-category">
          <view class="filter-item {{activeType === 'manager' ? 'active' : ''}}"  catchtap="handleChooseFilter" data-type="manager" data-action="switchFilterType">
            <view class="filter-item-name"  data-type="manager" data-action="switchFilterType">按负责人</view>
            <image class="active-icon" wx:if="{{activeType === 'manager'}}" src="/images/delete_icon.png"></image>
          </view>
          <view class="filter-item {{activeType === 'area' ? 'active' : ''}}"  catchtap="handleChooseFilter" data-type="area" data-action="switchFilterType">
            <view class="filter-item-name"  data-type="area" data-action="switchFilterType">按区域</view>
            <image class="active-icon" wx:if="{{activeType === 'area'}}" src="/images/delete_icon.png"></image>
          </view>
        </view>
        <block wx:for="{{filterList}}"  wx:key="index" wx:for-index="index" wx:for-item="item" wx:if="{{filterList.length > 0}}">
          <view class="filter-title">{{item.label}}</view>
          <view class="filter-category filter-category">
            <view wx:for="{{item.list}}" wx:for-index="order" wx:for-item="child" class="filter-item {{child.selected ? 'active' : ''}} bb"  wx:key="order" data-opera-type="{{child.operaType}}" data-selected="{{child.selected}}" data-order="{{index}}" data-user-id="{{child.userId}}" data-action="{{item.action}}" data-user-level="{{child.userLevel}}" data-region-id="{{child.regionId}}" data-id="{{child.id}}" data-region-level="{{child.regionLevel}}"  catchtap="handleChooseFilter">
              <view class="filter-item-name">{{child.name}}</view>
              <view class="filter-item-sub" wx:if="{{child.sub}}">{{child.sub}}</view>
              <image class="active-icon" wx:if="{{child.selected}}" src="/images/delete_icon.png"></image>
            </view>
          </view>
        </block>
      </view>
      <view wx:if="{{filterList.length === 0}}">加载中..</view>
    </scroll-view>
    <view class="button-group">
      <view class="btn btn-cancel" bindtap="handleFilterCancel"  data-bool-view-filter="{{boolViewFilter}}" >取消</view>
      <view class="btn btn-confirm" bindtap="handleFilterConfirm" data-bool-view-filter="{{boolViewFilter}}" >确认</view>
    </view>
  </view>
</template>

<script>
import wepy from 'wepy';
import api from '../../api';
export default class LetterIndexCom extends wepy.component {
  $isComponent = true;
  data = {
    filterList: [],
    boolViewFilter: false,
    activeType: 'manager',
    selected: [],
    operaType: '',
  }
  methods = {
    handleChooseFilter(e) {
      console.log('choose filter..', e);
      this.operaType = e.currentTarget.dataset.operaType;
      if(e.currentTarget.dataset.action === 'switchFilterType'){
        this.switchFilterType(e.currentTarget.dataset.type);
        return;
      }
      if(e.currentTarget.dataset.action === 'chooseManager'){
        this.getBusinessManager(e);
        return;
      }
      if(e.currentTarget.dataset.action === 'chooseCity'){
        this.getArea(e);
        return;
      }
      this.selectedItem(e);
    },
    handleFilterCancel(e) {
      this.$emit('filter-cancel', e);
      this.close();
    },
    handleOpenFilter() {
      this.open();
    },
    handleFilterConfirm(e) {
      const filters = this.filterList[1] ? this.filterList[1].list : [] ;
      let selectedItems = [];
      if(this.activeType === 'manager'){
        selectedItems = filters.filter(item => item.selected);
        if(selectedItems.length === 0){
          selectedItems = this.filterList[0].list.filter(item => item.selected);
        }
      }else{
        selectedItems = filters.filter(item => item.selected);
        if(selectedItems.length === 0){
          selectedItems = filters;
        }
      }
      const params = {
        type: this.operaType,
        userId: '',
        userName: '',
        selectedItems,
      };
      const defaultItem = selectedItems[0];
      if(defaultItem){
        params.userId = defaultItem.userId;
        params.userName = defaultItem.userName || '';
        if(defaultItem.sub) {
          params.userName = params.userName + `(${defaultItem.sub.length > 3 ? (defaultItem.sub.substring(0, 3) + '...') : defaultItem.sub})`
        }
      }
      this.$emit('filter-confirm', e, params);
      this.close();
    },
  }
  open() {
    this.boolViewFilter = true;
    if(this.filterList.length === 0) {
      console.log('啦啦啦');
      this.switchFilterType(this.activeType);
    }
    this.$apply();
  }
  close() {
    this.boolViewFilter = false;
    this.$apply();
  }
  switchFilterType(type){
    console.log(type);
    this.activeType = type;
    const params = {
      data: {
        userId : wepy.getStorageSync('userId'),
        userType : wepy.getStorageSync('userType'),
        
      }
    };
    if(this.activeType === 'manager'){
      this.getManager(params);
    }else{
      this.getCity(params);
    }
    this.$apply();
  }
  selectedItem(e){
    const {id, order} = e.currentTarget.dataset;
    const currentList = this.filterList[Number(order)];
    if(currentList){
      const isCheckbox = currentList.type === 'checkbox';
      currentList.list = currentList.list.map(item => {
        if(isCheckbox){
          item.selected = item.id === id ? !item.selected : item.selected;
        }else{
          item.selected = item.id === id ? !item.selected : false;
        }
        return item;
      });
    }
    this.$apply();
  }
  async getManager(params) {
    const ret = await api.getFilterData(params);
    this.filterList = [{
      label: '按区域经理',
      type: 'radio',
      action: 'chooseManager',
      list: ret.data.data.map(item => {
        return {
          userName: item.userName,
          userId: item.userId,
          name: item.userName,
          id: item.userId + item.regionId,
          sub: item.regionName,
          regionId: item.regionId,
          regionLevel: item.regionLevel,
          operaType: 1,
          selected: false,
        }
      })
    }]
    console.log(this.filterList);
    this.$apply();
  }
  async getBusinessManager(e) {
    const {regionId, regionLevel, userId} = e.currentTarget.dataset;
    const params = {regionId, regionLevel, userId};
    this.selectedItem(e);
    const ret = await api.getBusiManagerNew({data: {regionId}});
    console.log(ret);
    this.filterList.splice(1, 1, {
      label: '按业务经理',
      type: 'radio',
      action: 'chooseBusinessManager',
      list: ret.data.data.map(item => {
        return {
          userName: item.userName,
          name: item.userName,
          id: item.userId + item.regionId,
          userId: item.userId,
          regionId: item.regionId,
          regionLevel: item.regionLevel,
          operaType: 2,
          selected: false,
        }
      })
    });
    console.log(this.filterList);
    this.$apply();
  }
  async getCity(params) {
    const ret = await api.getCityNew(params);
    console.log(ret);
    this.filterList = [{
      label: '城市选择',
      type: 'checkbox',
      action: 'chooseCity',
      list: ret.data.data.map(item => {
        return {
          name: item.regionName,
          id: item.userId + item.regionId,
          regionId: item.regionId,
          regionLevel: item.regionLevel,
          operaType: 3,
          selected: false,
        }
      })
    }]
    console.log(this.filterList);
    this.$apply();
  }
  async getArea(e) {
    const {regionId, regionLevel, userId, selected} = e.currentTarget.dataset;
    const params = {regionId, regionLevel, userId};
    this.selectedItem(e);
    const ret = await api.getAreaNew({
      data: {
        userId : wepy.getStorageSync('userId'),
        userType : wepy.getStorageSync('userType'),
        regionId,
      }
    });
    const existList = this.filterList[1] ? this.filterList[1].list : [];
    const addList = ret.data.data.map(item => {
      return {
        name: item.regionName,
        id: item.userId + item.regionId,
        regionId: item.regionId,
        regionLevel: item.regionLevel,
        operaType: 4,
        selected: false,
      }
    });

    let newList = [];
    if(selected){
      const filterKeys = addList.map(item => item.regionId);
      newList = existList.filter(item => !filterKeys.includes(item.regionId));
    }else{
      newList = existList.concat(addList);
    }

    this.filterList.splice(1, 1, {
      label: '县区选择',
      type: 'checkbox',
      action: 'chooseArea',
      list: newList,
    });
    console.log(this.filterList);
    this.$apply();
  }

}
</script>

<style>

.filter-slider {
  position: fixed;
  width: 620rpx;
  height: 100%;
  top: 0px;
  right: 0px;
  background-color: #fff;
  transform: translateX(100%);
  transition-duration: .3s;
  transition-property: transform;
  z-index: 9;
  font-size: 28rpx;
  display: flex;
  flex-direction: column;
}

.filter-slider.no-translate {
  transform: translateX(0);
}

.filter-slider-bg {
  position: fixed;
  width: 100%;
  height: 100%;
  background-color: rgba(0, 0, 0, .3);
  left: 0;
  top: 0;
  z-index: 8;
}

.filter-category {
  display: flex;
  flex-flow: wrap;
  flex-pack: justify;

}
.filter-slider scroll-view {
  display: flex;
  flex: 1;
}

.filter-title {
  padding: 20rpx;
}

.filter-item {
  position: relative;
  width: 180rpx;
  border-radius: 5px 5px;
  background-color: rgb(247,247,247);
  padding: 24rpx 0;
  text-align: center;
  margin-left: 20rpx;
  margin-bottom: 20rpx;
}
.filter-item-sub {
  font-size: 24rpx;
}
.filter-item.active {
  color: #rgb(53,141,255);
  background-color: #dff2ff;
}

.button-group {
  display: flex;
  width: 100%;
  height: 80rpx;
}

.button-group .btn {
  display: flex;
  flex: 1;
  height: 80rpx;
  text-align: center;
  justify-content: center;
  align-items: center;
  color: rgb(255,255,255);
}

.btn-confirm {
  background-color: rgb(52,140,255);
}

.btn-cancel {
  background-color: rgb(215,215,215);
}

.active-icon {
  width: 30rpx;
  height: 30rpx;
  position: absolute;
  bottom: 0rpx;
  right: 0rpx
}

</style>